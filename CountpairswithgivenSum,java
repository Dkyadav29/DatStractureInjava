Given an array of N integers, and an integer K, find the number of pairs of elements in the array whose sum is equal to K.

Input Format

The first line contains two spaced integers N and K denoting the size of the array and the target sum respectively.
The second line contains N space-separated integers denoting the elements of the array.
Output Format

Print the number of pairs whose sum is equal to K.
Input 1:

4 6
1 5 7 1
Output 1:

2
Explanation:

arr[0] + arr[1] = 1 + 5 = 6 and arr[1] + arr[3] = 5 + 1 = 6.

Input 2:

4 2
1 1 1 1
Output 2:

6
Explanation:

Each 1 will produce sum 2 with any 1.
Constraints:

1 ≤N≤ 10^5
1 ≤K≤ 2*10^5
1 ≤arr[i]≤ 10^5
Example
Input
4 2
1 1 1 1
Output
6

import java.util.*;
import java.io.*;

public class Main {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        // Read two integers, N and K, from input
        String s[] = br.readLine().trim().split(" ");
        int N = Integer.parseInt(s[0]);
        int K = Integer.parseInt(s[1]);
        
        // Read the array elements as strings, split and convert to integers
        String str[] = br.readLine().trim().split(" ");
        int arr[] = new int[N];
        for (int i = 0; i < N; i++) {
            arr[i] = Integer.parseInt(str[i]);
        }
        
        // Sort the array in ascending order
        Arrays.sort(arr);
        
        // Call the countPairs method to count the pairs whose sum is equal to K
        System.out.println(countPairs(arr, K, N));
    }

    public static long countPairs(int[] arr, int K, int N) {
        long ans = 0;
        int i = 0, j = N - 1;
        
        while (i < j) {
            int sum = arr[i] + arr[j];
            
            if (sum < K) {
                i++;
            } else if (sum > K) {
                j--;
            } else {
                if (arr[i] == arr[j]) {
                    long count = j - i + 1;
                    ans += (count * (count - 1)) / 2;
                    break;
                }
                
                int first = arr[i], second = arr[j];
                long countFirst = 0, countSecond = 0;
                
                while (arr[i] == first && i <= j) {
                    countFirst++;
                    i++;
                }
                
                while (arr[j] == second && i <= j) {
                    countSecond++;
                    j--;
                }
                
                ans += (countFirst * countSecond);
            }
        }
        
        return ans;
    }
}
